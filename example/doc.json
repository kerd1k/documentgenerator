{
  "/auth/acquirer": {
    "description": "# An \"h1\" header\n\nParagraphs are separated by a blank line.\n\n2nd paragraph. _Italic_, **bold**, and `monospace`. Itemized lists\nlook like:\n\n-   this one\n-   that one\n-   the other one\n\nNote that --- not considering the asterisk --- the actual text\ncontent starts at 4-columns in.\n\n> Block quotes are\n> written like so.\n>\n> They can span multiple paragraphs,\n> if you like.\n\nUse 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all\nin chapters 12--14\"). Three dots ... will be converted to an ellipsis.\nUnicode is supported. â˜º\n\n## An h2 header\n\nHere's a numbered list:\n\n1.  first item\n2.  second item\n3.  third item\n\nNote again how the actual text starts at 4 columns in (4 characters\nfrom the left side). Here's a code sample:\n\n    # Let me re-iterate ...\n    for i in 1 .. 10 { do-something(i) }\n\nAs you probably guessed, indented 4 spaces. By the way, instead of\nindenting the block, you can use delimited blocks, if you like:\n\n```\ndefine foobar() {\n    print \"Welcome to flavor country!\";\n}\n```\n\n(which makes copying & pasting easier). You can optionally mark the\ndelimited block for Pandoc to syntax highlight it:\n\n```python\nimport time\n# Quick, count to ten!\nfor i in range(10):\n    # (but not *too* quick)\n    time.sleep(0.5)\n    print i\n```\n",
    "endpoints": {
      "POST add": {
        "handler": "add",
        "fullPath": "/auth/acquirer/add",
        "method": "POST",
        "description": "Add new acquirer\nMulti-line **description**",
        "parameters": [
          {
            "name": "IAcquirerEntity",
            "type": "interface IAcquirerEntity extends Omit&lt;IAcquirer, \"deletedAt\" | \"createdAt\" | \"updatedAt\" | \"data\"&gt; {\n    deleted_at: string | null;\n    ctime: string;\n    utime: string | null;\n    data: string;\n}",
            "description": "acquirer entity",
            "optional": false
          },
          {
            "name": "IAcquirer",
            "type": "interface IAcquirer {\n  id: number;\n  data: IAcquirerData;\n  createdAt: string;\n  updatedAt: string | null;\n  deletedAt: string | null;\n  project_id: number;\n  trx_uid?:string;\n}",
            "description": "acquirer object",
            "optional": false
          },
          {
            "name": "IAcquirer[]",
            "type": "interface IAcquirer {\n  id: number;\n  data: IAcquirerData;\n  createdAt: string;\n  updatedAt: string | null;\n  deletedAt: string | null;\n  project_id: number;\n  trx_uid?:string;\n}[]",
            "description": "array of acquirers",
            "optional": false
          },
          {
            "name": "optionalString",
            "type": "string",
            "description": "optional string",
            "optional": true
          },
          {
            "name": "testStringName",
            "type": "string",
            "description": "optional string with default value",
            "optional": true,
            "default": "\"test\""
          }
        ],
        "private": false,
        "returns": [
          {
            "name": "IAcquirer",
            "type": "interface IAcquirer {\n  id: number;\n  data: IAcquirerData;\n  createdAt: string;\n  updatedAt: string | null;\n  deletedAt: string | null;\n  project_id: number;\n  trx_uid?:string;\n}",
            "description": "acquirer object"
          }
        ],
        "throws": [
          {
            "name": "WRONG_PARAMS",
            "type": "400",
            "description": "Wrong parameters",
            "status": 400
          },
          {
            "name": "ACQUIRER_ERROR",
            "type": "3000",
            "description": "Acquirer error from Errors",
            "status": 400
          },
          {
            "name": "ACQUIRER_ERROR2",
            "type": "3000",
            "description": "acquirer222 error222",
            "status": 0
          }
        ],
        "example": [
          "curl --location 'http://localhost:8095/api/template/transfer/add' \\\n        --header 'Authorization: ZEZyZLkoH-6q-Gr6hp2tk8Ktdci787WEfjfiuT38IWE' \\\n        --header 'Content-Type: application/json' \\\n        --data '{\n            'amount': 235,\n            'currency': 1,\n            'paymentMethod': 'internal',\n            'paymentAccountUid': '123456789',\n            'includeFeeIntoAmount2': 0,\n            'paymentMethodDetails': {\n                    'accountUID': 'amazing cardUID',\n                    'type':'amazingCard'\n            },\n            'target': {\n                    'details': 'accountUID',\n                    'type': 'amazingCash'\n            }\n        }'"
        ]
      },
      "POST update/:id": {
        "handler": "update",
        "fullPath": "/auth/acquirer/update/:id",
        "method": "POST",
        "description": "Update",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "description": "id to update",
            "optional": false
          },
          {
            "name": "data",
            "type": "object",
            "description": "acquirer data",
            "optional": false
          }
        ],
        "private": false,
        "returns": [
          {
            "name": "true",
            "type": "boolean",
            "description": "if updated"
          }
        ],
        "throws": [
          {
            "name": "WRONG_PARAMS",
            "type": "400",
            "description": "Wrong parameters",
            "status": 400
          },
          {
            "name": "ACQUIRER_ERROR",
            "type": "3000",
            "description": "Acquirer error from Errors",
            "status": 400
          }
        ],
        "example": [
          "POST http://localhost/api/acquirer/update/<ID>",
          "POST http://localhost/api/acquirer/update/"
        ]
      },
      "POST update": {
        "handler": "update",
        "fullPath": "/auth/acquirer/update",
        "method": "POST",
        "description": "Update",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "description": "id to update",
            "optional": false
          },
          {
            "name": "data",
            "type": "object",
            "description": "acquirer data",
            "optional": false
          }
        ],
        "private": false,
        "returns": [
          {
            "name": "true",
            "type": "boolean",
            "description": "if updated"
          }
        ],
        "throws": [
          {
            "name": "WRONG_PARAMS",
            "type": "400",
            "description": "Wrong parameters",
            "status": 400
          },
          {
            "name": "ACQUIRER_ERROR",
            "type": "3000",
            "description": "Acquirer error from Errors",
            "status": 400
          }
        ],
        "example": [
          "POST http://localhost/api/acquirer/update/<ID>",
          "POST http://localhost/api/acquirer/update/"
        ]
      },
      "DELETE delete": {
        "handler": "delete",
        "fullPath": "/auth/acquirer/delete",
        "method": "DELETE",
        "description": "Delete",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "description": "id to delete",
            "optional": false
          }
        ],
        "private": false,
        "returns": [
          {
            "name": "result",
            "type": "boolean",
            "description": "true if deleted"
          }
        ],
        "throws": [
          {
            "name": "WRONG_PARAMS",
            "type": "Error 400",
            "description": "wrong params",
            "status": 0
          },
          {
            "name": "ACQUIRER_ERROR",
            "type": "3000",
            "description": "Acquirer error from Errors",
            "status": 400
          }
        ],
        "example": [
          "DELETE http://localhost/api/acquirer/delete/<ID>"
        ]
      },
      "DELETE delete/:id": {
        "handler": "delete",
        "fullPath": "/auth/acquirer/delete/:id",
        "method": "DELETE",
        "description": "Delete",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "description": "id to delete",
            "optional": false
          }
        ],
        "private": false,
        "returns": [
          {
            "name": "result",
            "type": "boolean",
            "description": "true if deleted"
          }
        ],
        "throws": [
          {
            "name": "WRONG_PARAMS",
            "type": "Error 400",
            "description": "wrong params",
            "status": 0
          },
          {
            "name": "ACQUIRER_ERROR",
            "type": "3000",
            "description": "Acquirer error from Errors",
            "status": 400
          }
        ],
        "example": [
          "DELETE http://localhost/api/acquirer/delete/<ID>"
        ]
      },
      "ALL list": {
        "handler": "list",
        "fullPath": "/auth/acquirer/list",
        "method": "ALL",
        "description": "Get all",
        "parameters": [],
        "private": false,
        "returns": [
          {
            "name": "IAcquirer",
            "type": "interface IAcquirer {\n  id: number;\n  data: IAcquirerData;\n  createdAt: string;\n  updatedAt: string | null;\n  deletedAt: string | null;\n  project_id: number;\n  trx_uid?:string;\n}[]",
            "description": "list of acquirers"
          }
        ],
        "throws": [
          {
            "name": "WRONG_PARAMS",
            "type": "Error 400",
            "description": "wrong params",
            "status": 0
          },
          {
            "name": "ACQUIRER_ERROR",
            "type": "Error 3000",
            "description": "acquirer error",
            "status": 0
          }
        ],
        "example": [
          "POST http://localhost/api/acquirer/list"
        ]
      },
      "ALL get/:id": {
        "handler": "get",
        "fullPath": "/auth/acquirer/get/:id",
        "method": "ALL",
        "description": "Get acquirer by ID",
        "parameters": [],
        "private": false,
        "returns": [
          {
            "name": "IAcquirer",
            "type": "interface IAcquirer {\n  id: number;\n  data: IAcquirerData;\n  createdAt: string;\n  updatedAt: string | null;\n  deletedAt: string | null;\n  project_id: number;\n  trx_uid?:string;\n}[]",
            "description": "list of acquirers"
          }
        ],
        "throws": [
          {
            "name": "WRONG_PARAMS",
            "type": "400",
            "description": "Wrong parameters",
            "status": 400
          },
          {
            "name": "ACQUIRER_ERROR",
            "type": "3000",
            "description": "Acquirer error from Errors",
            "status": 400
          }
        ],
        "example": [
          "POST http://localhost/api/acquirer/get/<ID>",
          "POST http://localhost/api/acquirer/get/"
        ]
      },
      "ALL get/": {
        "handler": "get",
        "fullPath": "/auth/acquirer/get/",
        "method": "ALL",
        "description": "Get acquirer by ID",
        "parameters": [],
        "private": false,
        "returns": [
          {
            "name": "IAcquirer",
            "type": "interface IAcquirer {\n  id: number;\n  data: IAcquirerData;\n  createdAt: string;\n  updatedAt: string | null;\n  deletedAt: string | null;\n  project_id: number;\n  trx_uid?:string;\n}[]",
            "description": "list of acquirers"
          }
        ],
        "throws": [
          {
            "name": "WRONG_PARAMS",
            "type": "400",
            "description": "Wrong parameters",
            "status": 400
          },
          {
            "name": "ACQUIRER_ERROR",
            "type": "3000",
            "description": "Acquirer error from Errors",
            "status": 400
          }
        ],
        "example": [
          "POST http://localhost/api/acquirer/get/<ID>",
          "POST http://localhost/api/acquirer/get/"
        ]
      }
    }
  },
  "/auth/example": {
    "description": "",
    "endpoints": {
      "ALL test": {
        "handler": "testDocs",
        "fullPath": "/auth/example/test",
        "method": "ALL",
        "description": "TestDocs route",
        "parameters": [
          {
            "name": "employee",
            "type": "Object",
            "description": "The employee who is responsible for the project.",
            "optional": false
          },
          {
            "name": "employee.name",
            "type": "string",
            "description": "The name of the employee.",
            "optional": false
          },
          {
            "name": "employee.department",
            "type": "string",
            "description": "The employee's department.",
            "optional": false
          },
          {
            "name": "employees",
            "type": "Object",
            "description": "The employees who are responsible for the project.",
            "optional": false
          },
          {
            "name": "employees[].name",
            "type": "string",
            "description": "The name of an employee.",
            "optional": false
          },
          {
            "name": "employees[].department",
            "type": "string",
            "description": "The employee's department.",
            "optional": false
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": false
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": true
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": true,
            "default": "John Doe"
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": true,
            "default": "John Doe"
          },
          {
            "name": "somebody",
            "type": "(string|string)",
            "description": "Somebody's name, or an array of names.",
            "optional": true,
            "default": "John Doe"
          }
        ],
        "private": false,
        "headers": [
          {
            "name": "authorization",
            "description": "user auth token, to get user from API"
          }
        ],
        "throws": [
          {
            "name": "",
            "type": "InvalidArgumentException",
            "description": "",
            "status": 0
          },
          {
            "name": "",
            "type": "",
            "description": "Will throw an error if the argument is null.",
            "status": 0
          },
          {
            "name": "",
            "type": "DivideByZero",
            "description": "Argument x must be non-zero.",
            "status": 0
          }
        ],
        "returns": [
          {
            "name": "",
            "type": "TransferPacketVO<any>",
            "description": "response object"
          }
        ],
        "example": [
          "// returns 2\nglobalNS.method1(5, 10);",
          "// returns 3\nglobalNS.method(5, 15);",
          "http://localhost:8015/api/v1/example/test?test=test - will return {data:true}\nhttp://localhost:8015/api/v1/example/test?test=test2 - will return {data:false}\nhttp://localhost:8015/api/v1/example/test - will return error"
        ]
      },
      "ALL testWithIgnoreInterceptor": {
        "handler": "testDocs",
        "ignoreInterceptor": "true ",
        "fullPath": "/auth/example/testWithIgnoreInterceptor",
        "method": "ALL",
        "description": "TestDocs route",
        "parameters": [
          {
            "name": "employee",
            "type": "Object",
            "description": "The employee who is responsible for the project.",
            "optional": false
          },
          {
            "name": "employee.name",
            "type": "string",
            "description": "The name of the employee.",
            "optional": false
          },
          {
            "name": "employee.department",
            "type": "string",
            "description": "The employee's department.",
            "optional": false
          },
          {
            "name": "employees",
            "type": "Object",
            "description": "The employees who are responsible for the project.",
            "optional": false
          },
          {
            "name": "employees[].name",
            "type": "string",
            "description": "The name of an employee.",
            "optional": false
          },
          {
            "name": "employees[].department",
            "type": "string",
            "description": "The employee's department.",
            "optional": false
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": false
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": true
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": true,
            "default": "John Doe"
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": true,
            "default": "John Doe"
          },
          {
            "name": "somebody",
            "type": "(string|string)",
            "description": "Somebody's name, or an array of names.",
            "optional": true,
            "default": "John Doe"
          }
        ],
        "private": false,
        "headers": [
          {
            "name": "authorization",
            "description": "user auth token, to get user from API"
          }
        ],
        "throws": [
          {
            "name": "",
            "type": "InvalidArgumentException",
            "description": "",
            "status": 0
          },
          {
            "name": "",
            "type": "",
            "description": "Will throw an error if the argument is null.",
            "status": 0
          },
          {
            "name": "",
            "type": "DivideByZero",
            "description": "Argument x must be non-zero.",
            "status": 0
          }
        ],
        "returns": [
          {
            "name": "",
            "type": "TransferPacketVO<any>",
            "description": "response object"
          }
        ],
        "example": [
          "// returns 2\nglobalNS.method1(5, 10);",
          "// returns 3\nglobalNS.method(5, 15);",
          "http://localhost:8015/api/v1/example/test?test=test - will return {data:true}\nhttp://localhost:8015/api/v1/example/test?test=test2 - will return {data:false}\nhttp://localhost:8015/api/v1/example/test - will return error"
        ]
      },
      "ALL ui/testWithMultiSlash": {
        "handler": "testDocs",
        "fullPath": "/auth/example/ui/testWithMultiSlash",
        "method": "ALL",
        "description": "TestDocs route",
        "parameters": [
          {
            "name": "employee",
            "type": "Object",
            "description": "The employee who is responsible for the project.",
            "optional": false
          },
          {
            "name": "employee.name",
            "type": "string",
            "description": "The name of the employee.",
            "optional": false
          },
          {
            "name": "employee.department",
            "type": "string",
            "description": "The employee's department.",
            "optional": false
          },
          {
            "name": "employees",
            "type": "Object",
            "description": "The employees who are responsible for the project.",
            "optional": false
          },
          {
            "name": "employees[].name",
            "type": "string",
            "description": "The name of an employee.",
            "optional": false
          },
          {
            "name": "employees[].department",
            "type": "string",
            "description": "The employee's department.",
            "optional": false
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": false
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": true
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": true,
            "default": "John Doe"
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": true,
            "default": "John Doe"
          },
          {
            "name": "somebody",
            "type": "(string|string)",
            "description": "Somebody's name, or an array of names.",
            "optional": true,
            "default": "John Doe"
          }
        ],
        "private": false,
        "headers": [
          {
            "name": "authorization",
            "description": "user auth token, to get user from API"
          }
        ],
        "throws": [
          {
            "name": "",
            "type": "InvalidArgumentException",
            "description": "",
            "status": 0
          },
          {
            "name": "",
            "type": "",
            "description": "Will throw an error if the argument is null.",
            "status": 0
          },
          {
            "name": "",
            "type": "DivideByZero",
            "description": "Argument x must be non-zero.",
            "status": 0
          }
        ],
        "returns": [
          {
            "name": "",
            "type": "TransferPacketVO<any>",
            "description": "response object"
          }
        ],
        "example": [
          "// returns 2\nglobalNS.method1(5, 10);",
          "// returns 3\nglobalNS.method(5, 15);",
          "http://localhost:8015/api/v1/example/test?test=test - will return {data:true}\nhttp://localhost:8015/api/v1/example/test?test=test2 - will return {data:false}\nhttp://localhost:8015/api/v1/example/test - will return error"
        ]
      },
      "ALL testWithMultiline": {
        "handler": "testDocs",
        "ignoreInterceptor": "false",
        "fullPath": "/auth/example/testWithMultiline",
        "method": "ALL",
        "description": "TestDocs route",
        "parameters": [
          {
            "name": "employee",
            "type": "Object",
            "description": "The employee who is responsible for the project.",
            "optional": false
          },
          {
            "name": "employee.name",
            "type": "string",
            "description": "The name of the employee.",
            "optional": false
          },
          {
            "name": "employee.department",
            "type": "string",
            "description": "The employee's department.",
            "optional": false
          },
          {
            "name": "employees",
            "type": "Object",
            "description": "The employees who are responsible for the project.",
            "optional": false
          },
          {
            "name": "employees[].name",
            "type": "string",
            "description": "The name of an employee.",
            "optional": false
          },
          {
            "name": "employees[].department",
            "type": "string",
            "description": "The employee's department.",
            "optional": false
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": false
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": true
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": true,
            "default": "John Doe"
          },
          {
            "name": "somebody",
            "type": "string",
            "description": "Somebody's name.",
            "optional": true,
            "default": "John Doe"
          },
          {
            "name": "somebody",
            "type": "(string|string)",
            "description": "Somebody's name, or an array of names.",
            "optional": true,
            "default": "John Doe"
          }
        ],
        "private": false,
        "headers": [
          {
            "name": "authorization",
            "description": "user auth token, to get user from API"
          }
        ],
        "throws": [
          {
            "name": "",
            "type": "InvalidArgumentException",
            "description": "",
            "status": 0
          },
          {
            "name": "",
            "type": "",
            "description": "Will throw an error if the argument is null.",
            "status": 0
          },
          {
            "name": "",
            "type": "DivideByZero",
            "description": "Argument x must be non-zero.",
            "status": 0
          }
        ],
        "returns": [
          {
            "name": "",
            "type": "TransferPacketVO<any>",
            "description": "response object"
          }
        ],
        "example": [
          "// returns 2\nglobalNS.method1(5, 10);",
          "// returns 3\nglobalNS.method(5, 15);",
          "http://localhost:8015/api/v1/example/test?test=test - will return {data:true}\nhttp://localhost:8015/api/v1/example/test?test=test2 - will return {data:false}\nhttp://localhost:8015/api/v1/example/test - will return error"
        ]
      },
      "POST ui/testWithDifferentMethods": {
        "handler": "getDocTestPost",
        "ignoreInterceptor": "false",
        "fullPath": "/auth/example/ui/testWithDifferentMethods",
        "method": "POST",
        "description": "TEST POST",
        "parameters": [],
        "private": false,
        "returns": [
          {
            "name": "json",
            "type": "JSON3",
            "description": "JSON from file"
          }
        ],
        "throws": [
          {
            "name": "DOC_NO_DOCUMENT",
            "type": "Error 1003",
            "description": "no json file for documentation",
            "status": 0
          }
        ],
        "example": [
          "POST http://localhost/auth/doc/ui/test/"
        ]
      },
      "GET ui/testWithDifferentMethods": {
        "handler": "getDocTestGet",
        "ignoreInterceptor": "false",
        "fullPath": "/auth/example/ui/testWithDifferentMethods",
        "method": "GET",
        "description": "TEST GET",
        "parameters": [],
        "private": false,
        "returns": [
          {
            "name": "json",
            "type": "JSON2",
            "description": "JSON from file"
          }
        ],
        "throws": [
          {
            "name": "DOC_NO_DOCUMENT",
            "type": "1001",
            "description": "no json for documentation",
            "status": 400
          }
        ],
        "example": [
          "GET http://localhost/auth/doc/ui/test/"
        ]
      },
      "DELETE ui/testWithDifferentMethods": {
        "handler": "getDocTestDel",
        "ignoreInterceptor": "false",
        "fullPath": "/auth/example/ui/testWithDifferentMethods",
        "method": "DELETE",
        "description": "TEST DELETE",
        "parameters": [],
        "private": false,
        "returns": [
          {
            "name": "json",
            "type": "JSON6",
            "description": "JSON from file"
          }
        ],
        "throws": [
          {
            "name": "DOC_NO_DOCUMENT",
            "type": "Error 1006",
            "description": "no json file for documentation",
            "status": 0
          }
        ],
        "example": [
          "DELETE http://localhost/auth/doc/ui/test/"
        ]
      },
      "PUT ui/testWithDifferentMethods": {
        "handler": "getDocTestPut",
        "ignoreInterceptor": "true",
        "fullPath": "/auth/example/ui/testWithDifferentMethods",
        "method": "PUT",
        "description": "TEST PUT",
        "parameters": [],
        "private": false,
        "returns": [
          {
            "name": "json",
            "type": "JSON4",
            "description": "JSON from file"
          }
        ],
        "throws": [
          {
            "name": "DOC_NO_DOCUMENT",
            "type": "Error 1004",
            "description": "no json file for documentation",
            "status": 0
          }
        ],
        "example": [
          "PUT http://localhost/auth/doc/ui/test/"
        ]
      },
      "ASD ui/testWithDifferentMethods": {
        "handler": "getDocTestAsd",
        "ignoreInterceptor": "false",
        "fullPath": "/auth/example/ui/testWithDifferentMethods",
        "method": "ASD",
        "description": "TEST ASD - manual method",
        "parameters": [],
        "private": false,
        "returns": [
          {
            "name": "json",
            "type": "JSON5",
            "description": "JSON from file"
          }
        ],
        "throws": [
          {
            "name": "DOC_NO_DOCUMENT",
            "type": "Error 1005",
            "description": "no json file for documentation",
            "status": 0
          }
        ],
        "example": [
          "ASD http://localhost/auth/doc/ui/test/"
        ]
      }
    }
  }
}